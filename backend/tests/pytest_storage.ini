# Pytest configuration for storage tests
# This file provides specific configuration for running storage-related tests

[pytest]
# Test discovery patterns
python_files = test_storage_*.py
python_classes = Test*
python_functions = test_*

# Minimum pytest version
minversion = 7.0

# Command line options
addopts =
    # Show verbose output
    -v
    # Show local variables in tracebacks
    -l
    # Strict markers (fail on unknown markers)
    --strict-markers
    # Strict config (fail on unknown config options)
    --strict-config
    # Show summary of all test outcomes
    -ra
    # Coverage options
    --cov=backend.storage
    --cov-report=term-missing
    --cov-report=html:htmlcov/storage
    --cov-report=xml:coverage_storage.xml
    # Warnings
    -W ignore::DeprecationWarning
    -W ignore::PendingDeprecationWarning

# Test paths
testpaths =
    tests

# Markers for categorizing tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests for workflows
    slow: Tests that take longer to execute (>1s)
    performance: Performance and benchmark tests
    security: Security-related tests
    local: Tests for local storage provider
    azure: Tests for Azure storage provider (requires Azure SDK)
    smoke: Quick smoke tests for basic functionality

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = tests/logs/storage_tests.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s - %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
[coverage:run]
source = backend/storage
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */.venv/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    # Standard pragma
    pragma: no cover
    # Debug code
    def __repr__
    if self\.debug
    # Defensive programming
    raise AssertionError
    raise NotImplementedError
    # Non-runnable code
    if 0:
    if False:
    if __name__ == .__main__.:
    # Type checking
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    # Protocols
    \.\.\.

[coverage:html]
directory = htmlcov/storage
